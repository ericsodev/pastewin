// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String       @id @default(cuid())
  name             String?
  displayName      String?      @unique
  email            String?      @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  ownedProjects    Project[]    @relation("Owner")
  editableProjects Project[]    @relation("Editor")
  viewableProjects Project[]    @relation("Viewer")
  invitations      Invitation[]
}

model Document {
  id            String     @id @unique @default(cuid())
  name          String     @default("Document")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  content       String
  slug          String     @unique @default(cuid())
  project       Project?   @relation("OwnedDocuments", fields: [projectId], references: [id])
  projectId     String?
  pinnedProject Project?   @relation("PinnedDocument")
  revisions     Revision[]
  viewOnly      Boolean
  discoverable  Boolean    @default(true)
}

model Revision {
  id         String   @id @unique @default(cuid())
  document   Document @relation(fields: [documentId], references: [id])
  documentId String
  name       String
  content    String
  createdAt  DateTime @default(now())
}

model Project {
  id               String       @id @unique @default(cuid())
  name             String
  documents        Document[]   @relation("OwnedDocuments")
  pinnedDocument   Document?    @relation("PinnedDocument", fields: [pinnedDocumentId], references: [id])
  owner            User         @relation("Owner", fields: [userId], references: [id])
  editors          User[]       @relation("Editor")
  viewers          User[]       @relation("Viewer")
  invitations      Invitation[]
  public           Boolean      @default(false)
  slug             String       @unique @default(cuid())
  viewOnly         Boolean      @default(true)
  userId           String
  pinnedDocumentId String?      @unique
}

model Invitation {
  project   Project     @relation(fields: [projectId], references: [id])
  projectId String
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  role      ProjectRole

  @@unique([projectId, userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ProjectRole {
  VIEWER
  EDITOR
  OWNER
}
